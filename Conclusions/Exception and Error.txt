---------------------------------Exception and Error--------------------------------------------
Throwable 是所有 Java 程序中错误处理的父类 ，有两种子类： Error 和 Exception 。

Error ：表示由 JVM 所侦测到的无法预期的错误，由于这是属于 JVM 层次的严重错误 ，导致 JVM 无法继续执行，因此，这是不可捕捉到的，无法采取任何恢复的操作，顶多只能显示错误信息。

Exception ：表示可恢复的例外，这是可捕捉到的。
Java 提供了两类主要的异常 :runtime exception 和 checked exception 。 checked 异常也就是我们经常遇到的 IO 异常，以及 SQL 异常都是这种异常。 对于这种异常， JAVA 编译器强制要求我们必需对出现的这些异常进行 catch 。所以，面对这种异常不管我们是否愿意，只能自己去写一大堆 catch 块去处理可能的异常。
但是另外一种异常： runtime exception ，也称运行时异常，我们可以不处理。当出现这样的异常时，总是由虚拟机 接管。比如：我们从来没有人去处理过 NullPointerException 异常，它就是运行时异常，并且这种异常还是最常见的异常之一。

---------------------------------Exception-----------------------------------------------------------
*****************Throw and Throws*************************************
Throw:程序员自己抛出异常的语句：
	throw new RuntimeException();
Throws:声明方法需要抛出异常的定义：
	public void test() throws Exception{
	}
*****************Exception********************************************
		Throwable
		/		\
	Error		Exception
				/		\
			checked		Runtime
1.Error 和 Exception 都继承自Throwable类，都可以通过throw语句向上抛出。
2.我个人认为，异常分为两类，可预计的和不可预计的两种，我将不可预计的异常统称为RuntimeException。所有RuntimeException均被认为是程序员自己造成的异常，可以通过统一异常处理。
3.什么时候处理异常，什么时候抛出异常：
	1.处理当前可以解决的异常。
	2.抛出无法解决的异常。
4.finally：
	1.finally语句不一定会执行到，有两种情况：
		->try语句没有执行到，在之前程序就返回了。
		->在try中出现了System.exit(0)，这样虚拟机就被关闭了，finally也不会被执行。
	2.当try和catch中有return时，finally仍然会执行；
	3.finally是在return语句执行之后，返回之前执行的（此时并没有返回运算后的值，而是先把要返回的值保存起来，不管finally中的代码怎么样，返回的值都不会改变，仍然是之前保存的值），所以函数返回值是在finally执行前就已经确定了；
	4.finally中如果包含return，那么程序将在这里返回，而不是try或catch中的return返回，返回值就不是try或catch中保存的返回值了。