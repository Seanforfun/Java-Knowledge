---------------------------------Generic---------------------------------------------------------------
1.泛型类Generic Class
	public class Pair<T>				//在类名后面定义类型变量T，可以指明局部变量，方法返回值，以及传参的类型。
	E:集合的元素类型		List<E> list
	K,V：键值对
	T，U, S：任意的类型
2.泛型方法：
	1.普通类中定义泛型方法：
	class Test{ 
		public static <T> T test(T...t){			//返回值是T类型，参数是T类型。<T>是变量限定，限定了返回值或形参或both，参见第三条，<T> T 缺一不可。
		}
	}
	错误调用：
	double ret = Test.test(1, 1.2334, 0);		//1, 1.2334 and 0 are not the same type, compiler might find their mutual parent class and find Number and Comparable interface. and they are both Generic class, cause problem.
	correct:
	Double ret = Test.test(1D, 1.2334D, 0D);
3.泛型方法的变量限定：
	在方法中使用<T>:
	public static T test(T...t){			//返回值是T类型，参数是T类型。
	}
	<T extends Comparable&Serializable> ->限定了T必须是Comparable和Serializable的子类。
4.泛型代码和虚拟机：
	1.类型擦除
		无论何时定义一个泛型类型，都提供了一个相应的原始类型（raw type）。个人理解，就是将原本泛型的占位符全部替换成相应的类型，无限定变量用Object来替换。
	2.翻译泛型表达式：
		1.对于原始类型进行调用。（大多是在使用Object类型）
		2.类型强转。将Object强转成对应的数据类型。
5.约束和局限性：
	1.不能使用基本数据类型。
		WRONG:
		Pair<double> 		//擦除后会转换成Pair<Object>,而Object是类，无法存储基本数据类型，此处不会自动装箱。
	2.不能创建参数化类型的数组。
		个人认为数组是通过地址访问的，而不同的参数类型所占用字节数不同，无法实现index访问。
		ArrayStoreException印证我的观点。
		可以声明通配类型的数组然后进行类型强转。
	3.不能实例化一个泛型对象，可以通过如下办法：
	private Class<T> entityClass; 
	
	public BaseImpl(){
			Type genType = getClass().getGenericSuperclass();   
			Type[] params = ((ParameterizedType) genType).getActualTypeArguments();   
			entityClass =  (Class)params[0];  
	}
	4.Java泛型不能使用静态域和静态方法：
		静态域是类共享的，所有的泛型类的实现会造成静态域的类型不明确：
		public static T a;
		我创建两个类对象，分别给String和Integer，T的类型就不明确了，所以错误！
6.泛型类的继承规则：
	**无论S和T有什么联系，Pair<S>和Pair<T>没有什么联系。
7.通配符类型：
	1.通配符类型的泛型允许类型参数变化。
		Pair<? extends Employee> 表明泛型可以使任意类型，只要是Employee的子类即可。
		我把这一点看作是对第六点的优化。这样我们就能对Employee的子类进行统一的处理了。
	2.通配符允许我们进行超类型限定：
		Pair<? super Manager> 	将泛型限定为所有Manager的父类。
		这种方法可以用于固定形参，不能用于固定返回值。
		但是如下的方法是成立的：<T extends Comparable<? super T>>			extends对泛型上界进行了限定，super对泛型下界进行了限定。
		<T extends Comparable<? super T>>这里来分析T表示任意字符名，extends对泛型上限进行了限制即T必须是Comparable<? super T>的子类，然后<? super T>表示Comparable<>中的类型下限为T！

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	