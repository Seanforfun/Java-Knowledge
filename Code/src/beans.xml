<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context  
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
       
     <context:component-scan base-package="ca.mcmaster.spring"/>
    <!--只会扫描属性上的注解-->
    <context:annotation-config></context:annotation-config>
    
    <!-- 基于@AspectJ切面的驱动器 -->
    <aop:aspectj-autoproxy/>
    
    <!-- 引入properties文件 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!-- 通过PropertyPlaceholderConfigurer引入properties文件 -->
	<!-- <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" scope="singleton">
    	<property name="location" value="classpath:jdbc.properties"/>
    </bean> -->
    
    <bean id="myResource" class="org.springframework.context.support.ResourceBundleMessageSource">
    	<property name="basenames">
    		<list>
    			<value>ca/mcmaster/spring/i18n/fmt_greeting</value>
    		</list>
    	</property>
    </bean>
    
    <bean id="sysConfig" class="ca.mcmaster.spring.di.SysConfig" scope="singleton" init-method="initSysConfig"/>
    <!-- <bean id="dataSourceConfig" class="ca.mcmaster.spring.di.DataSourceConfig">
    	<property name="maxTimeOut" value="#{sysConfig.maxTimeOut}"/>
    	<property name="connections" value="#{sysConfig.connections}"/>
    </bean> -->
    
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
    	<property name="driverClassName" value="${driverClassName}"/>
    	<property name="url" value="${url}"/>
    	<property name="username" value="${username}"/>
    	<property name="password" value="${password}"/>
    </bean>

 	<bean id="customer" class="ca.mcmaster.spring.Customer" scope="singleton">
		<property name="name" value="BigSean"/>
	</bean>
	
	<!-- <bean id="myBean" class="ca.mcmaster.spring.beanfactory.lifecycle.MyBean" scope="singleton">
      <property name="tag" value="test"/>
  </bean>  -->
  	<bean id="student" class="ca.mcmaster.spring.di.Student" scope="singleton">
  		<property name="name" value="Sean"/>
  		<property name="age" value="25"/>
  		<property name="customer.name" value="BBBB"/>
  		<property name="hobbies">
  			<list>
  				<value>basketball</value>
  				<value>swimming</value>
  				<value>football</value>
  			</list>
  		</property>
  		<property name="set">
  			<set>
  				<value>basketball1</value>
  				<value>swimming1</value>
  				<value>football1</value>
  			</set>
  		</property>
  		<property name="map">
  			<map>
  				<entry key="k1" value="v1"/>
  				<entry key="k2" value="v2"/>
  				<entry key="k3" value="v3"/>
  				<entry key="k4" value="v4"/>
  			</map>
  		</property>
  		<property name="properties">
  			<props>
  				<prop key="name">SeanForFun</prop>
  				<prop key="place">McMaster</prop>
  			</props>
  		</property>
  	</bean>
  	
  	<bean id="abstracatCar" class="ca.mcmaster.spring.di.Car" abstract="true">
  		<property name="brand" value="RAV4"/>
  	</bean>
  	
  	<bean id="redCar" class="ca.mcmaster.spring.di.Car" parent="abstracatCar">
  		<property name="color" value="red"/>
  	</bean>
  	
  	<bean id="teslaCar" class="ca.mcmaster.spring.di.CarFactoryBean">
  		<property name="carInfo" value="This is a while tesla."/>
  	</bean>
  	
	<bean id="car" class="ca.mcmaster.spring.di.Car" scope="singleton">
  		<constructor-arg name="brand" value="RAV4" type="java.lang.String"/>
  		<constructor-arg name="color" value="GREY" type="java.lang.String"/>
  	</bean>
  	<bean id="carFactory" class="ca.mcmaster.spring.di.CarFactory" scope="singleton"/>
  	<bean id="bmw" factory-bean="carFactory" factory-method="getInstance"></bean>
  	<bean id="lookupDi" class="ca.mcmaster.spring.di.LookupDi">
  		<lookup-method name="getStudent" bean="student"/>
  	</bean>
  	<!-- <bean id="testDemo" class="ca.mcmaster.spring.di.TestDemo"></bean> -->
  	
  	<!-- 通过ProxyFactoryBean配置代理 -->
  	<!-- 定义了前置增强的方法 -->
  	<bean id="greetingAdvice" class="ca.mcmaster.spring.aop.GreetBeforeAdvice"/>
  	<!-- 定义后置增强 -->
  	<bean id="greetingAfter" class="ca.mcmaster.spring.aop.GreetingAfterAdvice"/>
  	<!-- 定义环绕增强 -->
  	<bean id="greetingRound" class="ca.mcmaster.spring.aop.GreetingInterceptor"/>
  	<!-- 定义异常后增强 -->
  	<bean id="greetingException" class="ca.mcmaster.spring.aop.GreetAfterException"/>
  	<!-- 要生成代理的对象 -->
  	<bean id="target" class="ca.mcmaster.spring.aop.NaiveWaiter"/>
  	<!-- 生成的代理对象 -->
  	<bean id="waiter" class="org.springframework.aop.framework.ProxyFactoryBean" scope="singleton">
  		<property name="proxyInterfaces" value="ca.mcmaster.spring.aop.Waiter"/>
  		<!-- 要织入的增强 -->
  		<property name="interceptorNames" value="greetingAdvice, greetingAfter, greetingRound, greetingException"/>
  		<!-- 要为哪个类生成代理 -->
  		<property name="target" ref="target"/>
  		<!-- CGlib的运行效率是JDK proxy的10倍，但是JDK proxy的生成速度是CGLib的8倍，所以对于
  		单例模式，我们希望使用CGLIB，因为在加载容器的时候我们就会生成所有的单例（除非懒加载），
  		但是对于原型模式的对象，每次需要均会生成一个新对象，此时我们倾向于使用JDK Proxy。 -->
  		<!-- 当optimize设置为true时，就会强制使用CGLIB。 -->
  		<property name="optimize" value="true"/>
  		<!-- 选择是否使用对类进行代理(而不是对接口进行代理)，所以当这个选项设置为true时，
  		强制使用CGLIB。 -->
  		<property name="proxyTargetClass" value="true"/>
  		<!-- 默认使用单例模式 -->
  		<property name="singleton" value="true"/>
  	</bean>
  	
  	<!-- 配置切面 -->
  	<!-- seller和waiter的实例对象，将会为这两个对象生成代理 -->
  	<bean id="waiterTarget" class="ca.mcmaster.spring.aop.wiring.Waiter" scope="singleton"/>
  	<bean id="sellerTarget" class="ca.mcmaster.spring.aop.wiring.Seller" scope="singleton"/>
  	<!-- 配置通知(增强的内容) -->
  	<bean id="greetingBeforeAdvice" class="ca.mcmaster.spring.aop.wiring.GreetingBeforeAdvice" scope="singleton"/>
  	<!-- 配置切面(内部定义增强的内容和切点) -->
  	<!-- 其中对方法和类进行了匹配 -->
  	<bean id="greetingAdvisor" class="ca.mcmaster.spring.aop.wiring.GreetingAdvisor" scope="singleton">
  		<!-- 将通知织入切面 -->
  		<property name="advice" ref="greetingBeforeAdvice"/>
  	</bean>
  	<!-- 通过正则表达式对方法和类进行匹配 -->
  	<bean id="regexAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
  		<property name="advice" ref="greetingBeforeAdvice"/>
  		<property name="patterns">
  			<list>
  				<!-- 通过正则匹配所有包含greet的方法 -->
  				<value>.*greet.*</value>
  			</list>
  		</property>
  	</bean>
  	<!-- 通过动态匹配对传入的参数进行动态匹配 -->
  	<bean id="dynamicAdvisor" class="org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor">
  		<!-- 通过匿名内部类定义切点实例 -->
  		<property name="pointcut">
  			<bean class="ca.mcmaster.spring.aop.wiring.GreetingDynamicPointcut"/>
  		</property>
  		<!-- 通过匿名内部类定义前置增强的实例 -->
  		<property name="advice" ref="greetingBeforeAdvice"/>
  	</bean>
  	<!-- 通过设置流程切面 -->
  	<!-- <bean id="controlFlowPointcut" class="org.springframework.aop.support.ControlFlowPointcut">
  		<constructor-arg name="clazz" value="ca.mcmaster.spring.aop.wiring.WaiterDelegant"/>
  		<constructor-arg name="methodName" value="greetTo"/>
  	</bean>
  	<bean id="controlFlowAdvisor" class="org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor">
  		<property name="pointcut" ref="controlFlowPointcut"/>
  		<property name="advice" ref="greetingBeforeAdvice"/>
  	</bean> -->
  	<!-- 设置复合切面 -->
  	<bean id="composablePointcut" class="ca.mcmaster.spring.aop.wiring.GreetingComposablePointcut"/>
  	<bean id="composableAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
  		<property name="pointcut" value="#{composablePointcut.intersectionPointcut}"/>
  		<property name="advice" ref="greetingBeforeAdvice"/>
  	</bean>
  	<!-- 将切面织入代理对象 -->
  	<!-- 定义了要生成的多个Bean对象代理的父类 -->
  	<bean id="parent" class="org.springframework.aop.framework.ProxyFactoryBean" abstract="true">
  		<property name="interceptorNames" value="composableAdvisor"/>
  		<property name="proxyTargetClass" value="true"/>
  	</bean>
  	<!-- 要生成一个代理对象，我们实际上还是要配置一个实际的对象，
  	针对当前所给的对象进行代理生成 -->
  	<!-- <bean id="waiterProxy" parent="parent">
  		<property name="target" ref="waiterTarget"/>
  	</bean>
  	<bean id="sellerProxy" parent="parent">
  		<property name="target" ref="sellerTarget"/>
  	</bean>
  	<bean id="waiterDelegant" class="ca.mcmaster.spring.aop.wiring.WaiterDelegant">
  		<property name="waiter">
  			<bean class="ca.mcmaster.spring.aop.wiring.Waiter"></bean>
  		</property>
  	</bean>
  	<bean id="waiter1" class="org.springframework.aop.framework.ProxyFactoryBean">
  		<property name="target" ref="waiterTarget"/>
  		<property name="interceptorNames" value="composableAdvisor"/>
  		<property name="proxyTargetClass" value="true"/>
  	</bean> -->
  	
  	<!-- 使用bean名称进行自动代理 -->
  	<!-- <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator" >
  		<property name="beanNames">
  			<list>
  				<value>*Target</value>
  			</list>
  		</property>
  		<property name="interceptorNames" value="greetingBeforeAdvice"/>
  		<property name="optimize" value="true"/>
  	</bean> -->
  	
  	<!-- 通过切面生成代理 -->
  	<!-- 切面本身包括了增强方法和要增强的对象，这两个对象已经包括了足够的信息，
  	当匹配到了要被增强的对象时，会自动生成代理。 -->
  	<!-- <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/> -->
  	
  	<!-- 配置AspectJ -->
  	<!-- 配置AspectJ切面bean -->
 	<!-- <bean class="ca.mcmaster.spring.aop.wiring.PreGreetingAspect"/> -->
  	<!-- 该bean会自动扫描@AspectJ注解, 同时也会自动织入所有通过xml配置的切面 -->
  	<!-- <bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator"/> -->
  	
</beans>